apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/instance: redis
    app.kubernetes.io/name: redis-simple-ss
  name: redis-simple-ss
  namespace: redis
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: redis
      app.kubernetes.io/name: redis-simple-ss
  serviceName: ""
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: redis
        app.kubernetes.io/name: redis-simple-ss
    spec:
      containers:
        - args:
            - /usr/local/etc/redis/redis.conf
          command:
            - redis-server
          image: redis:7.0.10
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 2
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: http
            timeoutSeconds: 2
          name: redis-simple-ss
          ports:
            - containerPort: 6379
              name: http
              protocol: TCP
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext: { }
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /usr/local/etc/redis/
              name: redis-config
            - mountPath: /data
              name: redis-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: { }
      terminationGracePeriodSeconds: 30
      volumes:
        - configMap:
            name: redis-simple-ss-configmap
          name: redis-config
        - emptyDir: { }
          name: redis-data
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate